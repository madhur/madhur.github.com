<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Coding it my way</title>
  <link href="https://madhur.co.in/blog/"/>
 <updated>2021-08-14T11:10:26+05:30</updated>
 <id>https://madhur.co.in/blog/</id>
 <author>
   <name>Madhur Ahuja</name>
   <email>ahuja.madhur@gmail.com</email>
 </author>
 
 
 <entry>
   <title>Liveness and Readiness Probes</title>
   <link href="https://madhur.co.in/blog/2021/08/14/liveness-and-readiness-probes.html"/>
   <updated>2021-08-14T00:00:00+05:30</updated>
   <id>id:/blog/2021/08/14/liveness-and-readiness-probes</id>
   <content type="html">&lt;p&gt;When working with Kubernetes, &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&quot;&gt;Liveness and Readiness Probes&lt;/a&gt; are very important concepts to understand.&lt;/p&gt;

&lt;h2 id=&quot;readiness-probe&quot;&gt;Readiness Probe&lt;/h2&gt;

&lt;p&gt;Kubernetes fires readiness probe to the pod to determine if the pod is ready to serve traffic or not.&lt;/p&gt;

&lt;p&gt;It can simply be defined as&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;readinessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cat&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tmp/healthy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;periodSeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can also provide readiness probe as HTTP or TCP commands&lt;/p&gt;

&lt;h2 id=&quot;liveness-probe&quot;&gt;Liveness Probe&lt;/h2&gt;

&lt;p&gt;Kubernetes fires readiness probe to the pod to determine if the pod is alive. If the pod is not alive, Kubernetes will restart the pod.&lt;/p&gt;

&lt;p&gt;An important point to be noted is&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; Liveness probes do not wait for readiness probes to succeed. If you want to wait before executing a liveness probe you should use initialDelaySeconds or a startupProbe.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which means that liveness probe and readiness probes have no dependency on each other. Some people assume that liveness probe start only after readiness probe is successful. This is misconception and is incorrect.&lt;/p&gt;

&lt;h3 id=&quot;how-to-determine-the-value-of-these-probes&quot;&gt;How to determine the value of these probes&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Determine the max start-up time taken by the application server to successfully start accepting http connections.
For example, in our case pod takes around 15 seconds in all different environments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Assuming a buffer of about 15 seconds we set the liveness probe to 30 seconds, with the default retry of 3 times and time difference between each retry as 5 seconds (these default value are set in periodSeconds and failureThreshold for each probe).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This leads to liveness probe being successful in the worst case scenario up to 45 seconds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With another buffer of 15 seconds we set the readiness probe for 60 seconds.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;startup-probes&quot;&gt;Startup Probes&lt;/h2&gt;

&lt;p&gt;Kubernetes introduced a new type of probe called startup probe to introduce the delay for liveness probes.&lt;/p&gt;

&lt;p&gt;As per kubernetes&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sometimes, you have to deal with legacy applications that might require an additional startup time on their first initialization. In &amp;gt; such cases, it can be tricky to set up liveness probe parameters without compromising the fast response to deadlocks that motivated such &amp;gt; a probe. The trick is to set up a startup probe with the same command, HTTP or TCP check, with a failureThreshold * periodSeconds long &amp;gt; enough to cover the worse case startup time.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Liveness and Readiness Probes</title>
   <link href="https://madhur.co.in/blog/2021/07/18/meaning-of-at-least-once-at-most-once-and-exactly-once-delivery.html"/>
   <updated>2021-07-18T00:00:00+05:30</updated>
   <id>id:/blog/2021/07/18/meaning-of-at-least-once-at-most-once-and-exactly-once-delivery</id>
   <content type="html">&lt;p&gt;Ever since I have started working with Kafka, I have came across these terms very frequently, At-least once, At-most once and Exactly Once.&lt;/p&gt;

&lt;p&gt;As an engineer, It is very important to understand these concepts.&lt;/p&gt;
&lt;h2 id=&quot;at-most-once-configuration&quot;&gt;At-most once Configuration&lt;/h2&gt;

&lt;p&gt;As the name suggests, At-most-once means the message will be delivered at-most once. Once delivered, there is no chance of delivering again. If the consumer is unable to handle the message due to some exception, the message is lost. This is because Kafka is automatically committing the last offset used.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;enable.auto.commit&lt;/code&gt; to true&lt;/li&gt;
  &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;auto.commit.interval.ms&lt;/code&gt; to low value&lt;/li&gt;
  &lt;li&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;auto.commit&lt;/code&gt; is set to true, there is no need to call &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer.commitSync()&lt;/code&gt; from the consumer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that it is also possible to have at-lest-once scenario with the same configuration. Let’s say consumer successfully processed the message successfully into its store and in the meantime before kafka could commit the offset, consumer was restarted. In this scenario, consumer would again get the same message.&lt;/p&gt;

&lt;p&gt;Hence, even if using at-most once or at-least once configuration, consumer should be always prepared to handle the duplicates.&lt;/p&gt;

&lt;h2 id=&quot;at-least-once-configuration&quot;&gt;At-least once configuration&lt;/h2&gt;
&lt;p&gt;At-least once as the name suggests, message will be delivered atleast once. There is high chance that message will be delivered again as duplicate.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;enable.auto.commit&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; OR&lt;/li&gt;
  &lt;li&gt;Consumer should now then take control of the message offset commits to Kafka by making the &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer.commitSync()&lt;/code&gt; call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s say consumer has processed the messages and committed the messages to its local store, but consumer crashes and did not get a chance to commit offset to Kafka before it has crashed. When consumer restarts, Kafka would deliver messages from the last offset, resulting in duplicates.&lt;/p&gt;

&lt;h2 id=&quot;exactly-once-configuration&quot;&gt;Exactly-once configuration&lt;/h2&gt;

&lt;p&gt;Exactly-once as the name suggests, there will be only one and once message delivery. It difficult to achieve in practice.&lt;/p&gt;

&lt;p&gt;In this case offset needs to be manually managed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;enable.auto.commit&lt;/code&gt; to false&lt;/li&gt;
  &lt;li&gt;Do not make call to &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer.commitSync()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Implement a &lt;code class=&quot;highlighter-rouge&quot;&gt;ConsumerRebalanceListener&lt;/code&gt; and within the listener perform &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer.seek(topicPartition,offset);&lt;/code&gt; to start reading from a specific offset of that topic/partition.&lt;/li&gt;
  &lt;li&gt;While processing the messages, get hold of the offset of each message. Store the processed message’s offset in an atomic way along with the processed message using atomic-transaction. When data is stored in relational database atomicity is easier to implement. For non-relational data-store such as HDFS store or No-SQL store one way to achieve atomicity is as follows: Store the offset along with the message.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>How tinyUrl Does redirection</title>
   <link href="https://madhur.co.in/blog/2021/07/11/how-tinyurl-does-redirection.html"/>
   <updated>2021-07-11T00:00:00+05:30</updated>
   <id>id:/blog/2021/07/11/how-tinyurl-does-redirection</id>
   <content type="html">&lt;p&gt;I got curious about how tinyUrl does redirection for its Url. Is it standard browser redirect with 301/302 status code or something else?&lt;/p&gt;

&lt;p&gt;With that created this tinyUrl &lt;a href=&quot;https://tinyurl.com/madhur25&quot;&gt;tinyurl.com/madhur25&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figured out that it was indeed a browser redirect using 301 status code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl https://tinyurl.com/madhur25 -vvv
* STATE: INIT =&amp;gt; CONNECT handle 0x600057310; line 1407 (connection #-5000)
* Added connection 0. The cache now contains 1 members
*   Trying 104.20.138.65...
* TCP_NODELAY set
* STATE: CONNECT =&amp;gt; WAITCONNECT handle 0x600057310; line 1460 (connection #0)
* Connected to tinyurl.com (104.20.138.65) port 443 (#0)
* STATE: WAITCONNECT =&amp;gt; SENDPROTOCONNECT handle 0x600057310; line 1567 (connection #0)
* Marked for [keep alive]: HTTP default
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully set certificate verify locations:
*   CAfile: /usr/ssl/certs/ca-bundle.crt
  CApath: none
* TLSv1.2 (OUT), TLS header, Certificate Status (22):
* TLSv1.2 (OUT), TLS handshake, Client hello (1):
* STATE: SENDPROTOCONNECT =&amp;gt; PROTOCONNECT handle 0x600057310; line 1581 (connection #0)
* TLSv1.2 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
* TLSv1.2 (IN), TLS handshake, Server finished (14):
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
* TLSv1.2 (OUT), TLS change cipher, Client hello (1):
* TLSv1.2 (OUT), TLS handshake, Finished (20):
* TLSv1.2 (IN), TLS change cipher, Client hello (1):
* TLSv1.2 (IN), TLS handshake, Finished (20):
* SSL connection using TLSv1.2 / ECDHE-ECDSA-AES128-GCM-SHA256
* ALPN, server accepted to use http/1.1
* Server certificate:
*  subject: C=US; ST=California; L=San Francisco; O=Cloudflare, Inc.; CN=sni.cloudflaressl.com
*  start date: Jul  3 00:00:00 2021 GMT
*  expire date: Jul  2 23:59:59 2022 GMT
*  subjectAltName: host &quot;tinyurl.com&quot; matched cert's &quot;tinyurl.com&quot;
*  issuer: C=US; O=Cloudflare, Inc.; CN=Cloudflare Inc ECC CA-3
*  SSL certificate verify ok.
* STATE: PROTOCONNECT =&amp;gt; DO handle 0x600057310; line 1602 (connection #0)
&amp;gt; GET /madhur25 HTTP/1.1
&amp;gt; Host: tinyurl.com
&amp;gt; User-Agent: curl/7.51.0
&amp;gt; Accept: */*
&amp;gt;
* STATE: DO =&amp;gt; DO_DONE handle 0x600057310; line 1664 (connection #0)
* STATE: DO_DONE =&amp;gt; WAITPERFORM handle 0x600057310; line 1791 (connection #0)
* STATE: WAITPERFORM =&amp;gt; PERFORM handle 0x600057310; line 1801 (connection #0)
* HTTP 1.1 or later with persistent connection, pipelining supported
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;301&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Moved&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Permanently&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Date:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Sun&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Jul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;2021&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;04:11:01&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GMT&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content-Type:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UTF-8&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Transfer-Encoding:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;chunked&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Connection:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keep-alive&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;X-Powered-By:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;PHP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Location:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;madhur&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Cache-Control:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max-age=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;s-max-age=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;900,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stale-if-error:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;86400&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Referrer-Policy:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unsafe-url&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Strict-Transport-Security:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max-age=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;31536000;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;includeSubDomains&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;preload&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;CF-Cache-Status:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;DYNAMIC&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Expect-CT:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max-age=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;604800,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;report-uri=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cloudflare&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;blacklisted&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Server:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cloudflare&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;CF-RAY:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;66cf2f6e7e293c13-BLR&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt-svc:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;h3-27=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:443&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ma=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;86400,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;h3-28=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:443&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ma=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;86400,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;h3-29=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:443&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ma=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;86400,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;h3=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:443&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ma=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;86400&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;refresh&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0;url='https://www.madhur.co.in/'&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Redirecting to https://www.madhur.co.in/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        Redirecting to &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.madhur.co.in/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;https://www.madhur.co.in/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
* STATE: PERFORM =&amp;gt; DONE handle 0x600057310; line 1965 (connection #0)
* multi_done
* Curl_http_done: called premature == 0
* Connection #0 to host tinyurl.com left intact
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Encoding and Hashing</title>
   <link href="https://madhur.co.in/blog/2021/07/06/encoding-and-hashing.html"/>
   <updated>2021-07-06T00:00:00+05:30</updated>
   <id>id:/blog/2021/07/06/encoding-and-hashing</id>
   <content type="html">&lt;h2 id=&quot;md5&quot;&gt;MD5&lt;/h2&gt;

&lt;p&gt;MD5 is hashing algorithm. It produces 128 bit value&lt;/p&gt;

&lt;h2 id=&quot;base64-encoding&quot;&gt;Base64 Encoding&lt;/h2&gt;

&lt;p&gt;Base64 character encodes 6 bits of the hash value. So if we use base64 encoding of above value, it will contain 21 characters&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Capacity Estimation Examples</title>
   <link href="https://madhur.co.in/blog/2021/06/27/capacity-estimation.html"/>
   <updated>2021-06-27T00:00:00+05:30</updated>
   <id>id:/blog/2021/06/27/capacity-estimation</id>
   <content type="html">&lt;p&gt;Capacity estimation is one of the most important exercises in design.&lt;/p&gt;

&lt;p&gt;Twitter Example&lt;/p&gt;

&lt;p&gt;1B Total Users
200 M DAU
100 M new tweets everyday
Each user follows 200 people avg&lt;/p&gt;

&lt;p&gt;How many favorites per day?
Each user 5 favorite per day
200M *5 = 1B favorite&lt;/p&gt;

&lt;p&gt;Total tweet views
A User visits their timeline 2 times a day and visits 5 other people pages
Each page has 20 tweets&lt;/p&gt;

&lt;p&gt;200M &lt;em&gt;(2+5)&lt;/em&gt;20 = 28B / day&lt;/p&gt;

&lt;p&gt;Storage&lt;/p&gt;

&lt;p&gt;140 characters ~ 280 bytes
100M*(280+30) bytes =&amp;gt; 30 GB / day&lt;/p&gt;

&lt;p&gt;Not all tweets will have media, let’s assume that on average every fifth tweet has a photo and every tenth has a video. Let’s also assume on average a photo is 200KB and a video is 2MB. This will lead us to have 24TB of new media every day.
(100M/5 photos * 200KB) + (100M/10 videos * 2MB) ~= 24TB/day&lt;/p&gt;

&lt;p&gt;Bandwidth Estimates Since total ingress is 24TB per day, this would translate into 290MB/sec.&lt;/p&gt;

&lt;p&gt;Remember that we have 28B tweet views per day. We must show the photo of every tweet (if it has a photo), but let’s assume that the users watch every 3rd video they see in their timeline. So, total egress will be:
(28B * 280 bytes) / 86400s of text =&amp;gt; 93MB/s&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(28B/5 * 200KB ) / 86400s of photos =&amp;gt; 13GB/S&lt;/li&gt;
  &lt;li&gt;(28B/10/3 * 2MB ) / 86400s of Videos =&amp;gt; 22GB/s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Total ~= 35GB/s&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple Design of Communication Service</title>
   <link href="https://madhur.co.in/blog/2021/06/20/simple-design-of-communication-service.html"/>
   <updated>2021-06-20T00:00:00+05:30</updated>
   <id>id:/blog/2021/06/20/simple-design-of-communication-service</id>
   <content type="html">&lt;p&gt;Few months back, I had to make some changes to design of Communication Service.&lt;/p&gt;

&lt;p&gt;It was quite a complex architecture overall and I thought of documenting this in blogpost to outline my thought process.&lt;/p&gt;

&lt;p&gt;A communication service is responsible for reliably delivering the customer notification to the end user via any channel.&lt;/p&gt;

&lt;p&gt;In our case, the channels were email, SMS and push notification.&lt;/p&gt;

&lt;p&gt;The communication service was divided into multiple microservices:&lt;/p&gt;

&lt;h2 id=&quot;communication-services&quot;&gt;Communication Services&lt;/h2&gt;
&lt;p&gt;This was the main service which recieved payloads from other microservices whenever they had to send out a communication.&lt;/p&gt;

&lt;p&gt;The payload was json and interaction was via kafka queue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key points:&lt;/strong&gt;
We had to make sure we monitor the kafka queue for lag very closely. As any lag can potentially delay the communication to the end user.&lt;/p&gt;

&lt;p&gt;The communication service did the enrichment to the payload such as creating the email template, SMS template from its template database and pushed the enriched payload
to individiual channel kafka queues. We wanted to have individual channel queues for independently scaling them. For instance, our traffic on email was much higher compared to SMS and push notification. That way, we could scale the partitions on email kafka and queue.&lt;/p&gt;

&lt;p&gt;The communication service also generates a unique uuid for each request and persists into cassandra database. This serves as a single point of lookup for&lt;/p&gt;

&lt;h2 id=&quot;email--sms--push-service&quot;&gt;Email / SMS / Push Service&lt;/h2&gt;
&lt;p&gt;These are individual micro services listening to each of the channel queues. They make a rest call to the provider to actually deliver the email. Once the rest call is successfully made, we push the status message on a feedback kafka queue dedicated for each channel.The feedback kafka queues are again channel independent to allow them to independently scale.&lt;/p&gt;

&lt;p&gt;These services also contain webhook listeners. Typically, when you delivery a email / SMS / push via a vendor, vendor will send the feedback via webhook weather the mail / SMS / push was successfully delivered, or if it bounced or if it went to spam etc.&lt;/p&gt;

&lt;p&gt;It is important to have circuit breaker in these services as vendor services might go down any moment. Thus, it is important to have a dead letter queue, which would retry the failed pushes later.&lt;/p&gt;

&lt;p&gt;These feedbacks are also sent to the same feedback queues as updates.&lt;/p&gt;

&lt;p&gt;We could have had a separate service for feedback altogether, but I believe it didn’t require a separate microservice altogether which would expanded our monitoring footprint.&lt;/p&gt;

&lt;h2 id=&quot;feedback-service&quot;&gt;Feedback Service&lt;/h2&gt;

&lt;p&gt;This is the main services which receives all the updates w.r.t. each communication. These updates are consumed via feedback queues. It is important to scale this service sufficiently as we didn’t had a separate feedback service for each channel in order to have lesser complexity. Our email feedback kakfa topic had 200 partitions and there were 20 computes each running 10 threads to consume from these partitions.&lt;/p&gt;

&lt;p&gt;The job of the feedback service is to receive the feedback and push it to cassandra database. It asynchronously also pushes the feedback to analytics channel mainly an elasticsearch database for analytics purpose, since cassandra is not suited for doing analytics.&lt;/p&gt;

&lt;p&gt;The final design looked like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/Blog/comm_service.png&quot;&gt;&lt;img src=&quot;/images/Blog/comm_service.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>API Response Group Pattern - Improving latencies using GraphQL</title>
   <link href="https://madhur.co.in/blog/2021/06/13/api-response-group-pattern.html"/>
   <updated>2021-06-13T00:00:00+05:30</updated>
   <id>id:/blog/2021/06/13/api-response-group-pattern</id>
   <content type="html">&lt;p&gt;In a complex multiple microservices architecture, especially where in one microservice ends up calling a chain of other microservices, the API latency can become a concern.&lt;/p&gt;

&lt;p&gt;This is because there is network hop at each microservice layer, which adds to the latency in addition to the actual logic executed by the microservice itself.&lt;/p&gt;

&lt;p&gt;For example, in an e-commerce application, an Add to Cart API request might end up calling multiple downstream microservices such as Pricing Service, Availability Service etc.&lt;/p&gt;

&lt;p&gt;In a complex architecture, where multiple clients are involved such as Mobile Apps and web browsers, the data needed by clients can differ depending upon the situation.&lt;/p&gt;

&lt;p&gt;For example, if the user is adding an item to cart from the homepage, the client might not need pricing details as it might have that data already cached.&lt;/p&gt;

&lt;p&gt;In other scenario, if the user is just increasing the quantity of the item, there might not be need to call the availability service as the front end might have called it when user initially called it 
and front end could cache the availability data of the item for some time (lets say 15 minutes).&lt;/p&gt;

&lt;p&gt;To achieve the best API performance, it is important to recognize these patterns and incorporate into the API design.&lt;/p&gt;

&lt;p&gt;So instead of creating a separate API for each of these use cases, its better incorporate this by using
the &lt;em&gt;Response Group Pattern&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example, in our hypothetical case, we might come up with following response groups:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Response Group&lt;/th&gt;
      &lt;th&gt;Pricing Service&lt;/th&gt;
      &lt;th&gt;Seller Service&lt;/th&gt;
      &lt;th&gt;Asset Service&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;full&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;basic&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;summary&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;✓&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
As shown above, we don’t want to call Seller and Asset service when addToCart is invoked with response group basic, for example&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/addToCart?responseGroup=basic

/addToCart?responseGroup=full

/addToCart?responseGroup=summary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next problem to solve is, who will send this response group.&lt;/p&gt;

&lt;p&gt;In ideal situation, the client should not be worried about the response group, hardcoding these response group at the client side is maintainence nightmare and possible bugs. As the feature evolve, the client would have to worry about the appropriate response group to call all the time.&lt;/p&gt;

&lt;p&gt;That’s where &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; comes into the picture. The client should just pass the fields it requires to a GraphQL service, call the appropriate &lt;a href=&quot;https://graphql.org/learn/queries/&quot;&gt;mutation&lt;/a&gt; and graphQL layer should have logic to determine the response and pass it to backend service.&lt;/p&gt;

&lt;p&gt;In nutshell, that’s how our architecture looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/Blog/responsegroup.png&quot;&gt;&lt;img src=&quot;/images/Blog/responsegroup.png&quot; width=&quot;825px&quot; height=&quot;428px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Migrating from SQL to No-SQL without downtime</title>
   <link href="https://madhur.co.in/blog/2021/06/05/migrating-from-sql-nosql.html"/>
   <updated>2021-06-05T00:00:00+05:30</updated>
   <id>id:/blog/2021/06/05/migrating-from-sql-nosql</id>
   <content type="html">&lt;p&gt;Recently, we migrated a large MySQL database containing GB’s of data, millions of rows in few tables to CosmosDB.&lt;/p&gt;

&lt;p&gt;This was done without downtime. I want to lay down the approach we took in this post.&lt;/p&gt;

&lt;p&gt;Our intention was to setup both the database active - active and incrementally shift the traffic point to Service v1 (which was reading/writing to MySQL) towards 
Service v2 (which was reading/writing to CosmosDB)&lt;/p&gt;

&lt;p&gt;The first challenge was doing the initial data migration (called as bootstrap) and then set up a replication pipeline (called as change feed) so that any updates/inserts/deletes
happening on live MySQL DB are replicated to CosmosDB asynchronously.&lt;/p&gt;

&lt;p&gt;For this, we made use of Kafka.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The Bootstrap process consisted of reading the table from MySQL and dumping its content into a corresponding Kafka topic. That means, we had a corresponding Kafka topic for each
table within MySQL. There are products within market such as &lt;a href=&quot;https://www.continuent.com/products/tungsten-replicator&quot;&gt;this&lt;/a&gt; which can do this as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The change feed process consisted of having another set of parallel kafka topics which would contain the change feed, i.e. inserts / deletes / updates happening on the MySQL database.
This was tricky because setting it up requires modifying the service layer to publish this feeds to Kafka.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The point to note above is that bootstrap is a one time process and Change feed is an ongoing process. Also, bootstrap must be executed after the change feed process is up and running, so 
as to not miss any record.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Blog/migration.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now comes the consumer part,
The consumer application will connect to these kafka topics and store the data in Cosmos DB. We used bulk insertion in batches of 4000 records/batch to speed up the insertions.&lt;/p&gt;

&lt;p&gt;Here, the bootstrap kafka topics must be first completely consumed and written to target database before starting with ChangeFeed kafka topics.&lt;/p&gt;

&lt;p&gt;As the change feed kafka topics lag becomes closer to zero (it will never be zero, since data is always being written to change feed topics), the databases are considered active active.&lt;/p&gt;

&lt;p&gt;Few notes about Kafka:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use Kafka partitions to scale up bootstrap and consumption process horizontally. The partition key can be primary key of the table. This is especially important in change feed 
topics where multiple records will exist for same row.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The consumer application must handle errors gracefully. If there is an error during the batch writes, the entire batch might fail.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Blue-green_deployment&quot;&gt;blue green&lt;/a&gt; deployment methodology&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our case, it took almost 4 hrs to complete the migration including bootstrap and change feed process for around 3 million rows in couple of tables and fewer records in other tables.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Fun with Splunk</title>
   <link href="https://madhur.co.in/blog/2021/05/30/fun-with-splunk.html"/>
   <updated>2021-05-30T00:00:00+05:30</updated>
   <id>id:/blog/2021/05/30/fun-with-splunk</id>
   <content type="html">&lt;p&gt;Many organizations aggregate their logs on &lt;a href=&quot;https://www.splunk.com/en_us/software.html&quot;&gt;Splunk&lt;/a&gt;, which is a popular product for data ingestion and building intelligence on top of it.&lt;/p&gt;

&lt;p&gt;I too have been playing with data hosted on Splunk in last few weeks. Recently, I encountered a problem, where-in the data needs to be extracted based on some specified condition within a JSON array.&lt;/p&gt;

&lt;p&gt;For example, the splunk record was as follows:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Test Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ac646022-fa55-4e04-9856-a25a41b30014&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;phases&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;query.slots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;elapsedTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2000.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;viewPage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;elapsedTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;565.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The requriement was to retrieve all the recods which has the phase &lt;code class=&quot;highlighter-rouge&quot;&gt;query.slots&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;elapsedTime&lt;/code&gt; is greater than some specified value, for example 1000 ms.&lt;/p&gt;

&lt;p&gt;The query required unearthing some commands which I was unfamiliar with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.splunk.com/Documentation/SplunkCloud/latest/SearchReference/mvexpand&quot;&gt;mvexpand&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.splunk.com/Documentation/Splunk/8.2.0/SearchReference/MultivalueEvalFunctions&quot;&gt;mvzip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the final query&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;phases{}.name&quot;=&quot;query.slots&quot; | rename phases{}.elapsedTime as eTime, phases{}.name as name | eval temp=mvzip(eTime,name) | mvexpand temp | eval eTimeParsed=mvindex(split(temp,&quot;,&quot;),0),nameParsed=mvindex(split(temp,&quot;,&quot;),1)  | search nameParsed=&quot;query.slots&quot; eTimeParsed &amp;gt; 2000 | table nameParsed, eTimeParsed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Few Useful Kubectl commands</title>
   <link href="https://madhur.co.in/blog/2021/05/22/few-useful-kubectl-commands.html"/>
   <updated>2021-05-22T00:00:00+05:30</updated>
   <id>id:/blog/2021/05/22/few-useful-kubectl-commands</id>
   <content type="html">&lt;p&gt;Here are a few useful kubernetes commands:&lt;/p&gt;

&lt;h2 id=&quot;login-into-the-one-of-the-pods-shell&quot;&gt;Login into the one of the pod’s shell&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl exec --stdin --tty &amp;lt;&amp;lt;pod&amp;gt;&amp;gt; -- /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;view-services-from-all-namespaces&quot;&gt;View services from all namespaces&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get service --all-namespaces
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;change-the-current-namespace-context&quot;&gt;Change the current namespace context&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl config set-context --current --namespace = &amp;lt;&amp;lt;namespace&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;describe-a-pod&quot;&gt;Describe a pod&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl describe &amp;lt;&amp;lt;pod&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Handling Distributed transactions rollback</title>
   <link href="https://madhur.co.in/blog/2021/05/16/handling-distributed-transactions-rollback.html"/>
   <updated>2021-05-16T00:00:00+05:30</updated>
   <id>id:/blog/2021/05/16/handling-distributed-transactions-rollback</id>
   <content type="html">&lt;p&gt;Distributed transactions rollback are a tough beast. There are many patterns to solve this such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Two-phase_commit_protocol&quot;&gt;Two-phase commit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://microservices.io/patterns/data/saga.html&quot;&gt;Saga pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we will look at one of the example of a problem and how to solve it using the Saga pattern.&lt;/p&gt;

&lt;p&gt;Let’s say, we are an e-commerce platform and building a backend service for taking and submitting orders.&lt;/p&gt;

&lt;p&gt;A typical flow would like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Blog/orderflow1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Just assume, what would happen if an intermittent database failure is to happen during operation no. 8, i.e. while updating the order details to database. We have already captured the payment from user’s card. If the user retries the failed operation, we will end up double charging the user. Even if the user doesn’t retries, we have charged the user and because of unsuccessful DB operation, the order most probably won’t be fulfilled because the details are not captured itself.&lt;/p&gt;

&lt;p&gt;This can be handled as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Blog/orderflow2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the modified flow above, what we are doing is after detecting the database failure, we are calling the payment service and canelling the charge, whatever was made before the failure. This way, even though, the overall operation failed, we havn’t charged the user extra money.&lt;/p&gt;

&lt;p&gt;Things become interesting, when you see what would happen if operation no. 10 also fails. We are in same problem again. We have failed to return the money to user card probably because payment gateway was down, or there was a service timeout etc.&lt;/p&gt;

&lt;p&gt;In this case, there are two approaches to solve it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Try to record this failed update status in DB and let a job scheduler pickup these kinds of records and do a refund to user. The FE error should indicate to the user that &lt;code class=&quot;highlighter-rouge&quot;&gt;There was an error while submitting order. If you are charged, you will be refunded in few minutes.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with this approach is that since the database was unavailable intermittently, this database status update also is going to result in a failure in most probability.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The other solution is to drop a message after operation 10 into a kafka queue, where this message would be picked up by a consumer and would try to retry operation 10 after some delay. If the operation succeeds, the asynchronous notification to be sent to the user that the money has been refunded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/Blog/orderflow3.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One of the other solution is to make the operation 10. itself asynchronous. i.e. instead of the waiting for the response, the request will be queued by PaymentService and executed later. However, in this case, the user will always needs to be shown the message &lt;code class=&quot;highlighter-rouge&quot;&gt;There was an error while submitting order. If you are charged, you will be refunded in few minutes.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/Blog/orderflow4.png&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Removing the empty space around image using blur technique in CSS</title>
   <link href="https://madhur.co.in/blog/2021/05/09/removing-empty-space-around-image-using-blur-css.html"/>
   <updated>2021-05-09T00:00:00+05:30</updated>
   <id>id:/blog/2021/05/09/removing-empty-space-around-image-using-blur-css</id>
   <content type="html">&lt;p&gt;Many a times, when we want to display multiple images of various aspect ratios and pixel sizes in a gallery.&lt;/p&gt;

&lt;p&gt;In that case, there will be a single height and width of the card for the container, however the images will be of multiple sizes.&lt;/p&gt;

&lt;p&gt;This can result in whitespace around the container as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Blog/white-space.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the ways to solve it is to add the blur around the image.&lt;/p&gt;

&lt;p&gt;This is how it can be done using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::after&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;::after&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::before&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;::before&lt;/code&gt;&lt;/a&gt; CSS techniques.&lt;/p&gt;

&lt;style&gt;
.card-crop:before, .card-crop::after {
    content: &quot; &quot;;
    background-image: inherit;
    background-position: center !important;
    background-repeat: no-repeat !important;
    height: inherit;
    width: inherit;
}
.card-crop::before {
    background-size: cover !important;
    opacity: 0.6;
    filter: blur(8px);
}
.card-crop::after {
    background-size: contain !important;
    background-origin: content-box;
    padding: 5px;
}
.inline-block, .inline-block:before, .inline-block:after {
  display: inline-block;
  height: 225px;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
}
.card-crop {
  background-color: #ffffff;
  border-bottom: 1px solid #efefef;
  border-bottom: 1px solid #efefef;
  background-position: -1px -1px;
  background-size: 1px;
}
.inline-block:after {
  position: absolute;
}
&lt;/style&gt;

&lt;div class=&quot;card-crop inline-block&quot; style=&quot;background-image: url('/images/Blog/car.jpg'); height: 225px; width: 300px; display: flex; flex-direction: column; position:relative&quot;&gt;
&lt;/div&gt;

&lt;p&gt;This is the end result&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Blog/blur-white-space.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is code snippet for same:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.card-crop&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.card-crop&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.card-crop&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.card-crop&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contain&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.inline-block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.inline-block&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.inline-block&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;225px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.card-crop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#efefef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#efefef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.inline-block&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;card-crop inline-block&quot;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;background-image: url('/images/Blog/car.jpg'); height: 225px; width: 300px; display: flex; flex-direction: column; position:relative&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Useful Angular libraries</title>
   <link href="https://madhur.co.in/blog/2021/05/02/useful-angular-libraries.html"/>
   <updated>2021-05-02T00:00:00+05:30</updated>
   <id>id:/blog/2021/05/02/useful-angular-libraries</id>
   <content type="html">&lt;p&gt;Some of the better useful open source Angular libraries&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ng-select.github.io/ng-select/&quot;&gt;NgSelect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://swimlane.github.io/ngx-charts/#/ngx-charts/bar-vertical&quot;&gt;NgxCharts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ng-bootstrap.github.io/#/home&quot;&gt;Ng Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>HashMap with TTL</title>
   <link href="https://madhur.co.in/blog/2021/02/27/hashmap-with-ttl.html"/>
   <updated>2021-02-27T00:00:00+05:30</updated>
   <id>id:/blog/2021/02/27/hashmap-with-ttl</id>
   <content type="html">&lt;p&gt;We were working on a proof of concept and for that I quickly needed a HashMap with a Time to Live (TTL). Basically, I wanted the keys to expire automatically after a certain time period.&lt;/p&gt;

&lt;p&gt;Fortunatly, &lt;a href=&quot;https://github.com/google/guava&quot;&gt;Google Guava&lt;/a&gt; provides this out of the box in form of &lt;a href=&quot;https://guava.dev/releases/19.0/api/docs/com/google/common/cache/LoadingCache.html&quot;&gt;LoadingCache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is how you would initialize it,&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoadingCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CacheBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;maximumSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expireAfterWrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MINUTES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CacheLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can specify the maximum size of cache, after which the entries will be automatically evicted according to Least Recently Used (LRU) algorithm.&lt;/p&gt;

&lt;p&gt;The TTL can be specified using &lt;a href=&quot;https://guava.dev/releases/19.0/api/docs/com/google/common/cache/CacheBuilder.html#expireAfterWrite(long,%20java.util.concurrent.TimeUnit)&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expireAfterWrite&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;Note that when using this implementation, do not rely on the &lt;code class=&quot;highlighter-rouge&quot;&gt;size()&lt;/code&gt; property of the map since that might contain the expired entries as well. However, they will not be retrievable using the &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The expired entires are removed after a certain time duration using a routine maintainence job.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Same origin policy and CORS</title>
   <link href="https://madhur.co.in/blog/2021/02/20/same-origin-policy-and-cors.html"/>
   <updated>2021-02-20T00:00:00+05:30</updated>
   <id>id:/blog/2021/02/20/same-origin-policy-and-cors</id>
   <content type="html">&lt;p&gt;I have been recently focused a lot on Web application security especially web vulnerabilities such as &lt;a href=&quot;&quot;&gt;Cross Site Scripting (XSS)&lt;/a&gt; and &lt;a href=&quot;&quot;&gt;Cross Site Request Forgery (CSRF)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the interesting protection mechanism around these attacks is &lt;a href=&quot;&quot;&gt;Same Origin Policy&lt;/a&gt; which I believe every application developer should understand in deep.&lt;/p&gt;

&lt;h3 id=&quot;so-what-is-cross-origin-policy&quot;&gt;So what is cross origin policy?&lt;/h3&gt;

&lt;p&gt;Reference: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;Mozilla docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a browser loads the web page, the web page elements might refer to other origins (basically the combination of protocol, host and port). These elements can be CSS links &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link href&amp;gt;&lt;/code&gt;, JS links &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags,&lt;/p&gt;

&lt;h3 id=&quot;what-is-not-covered-under-same-origin-policy&quot;&gt;What is not covered under same origin policy?&lt;/h3&gt;

&lt;p&gt;This is most important. Its very important for developers to understand what is excluded under same origin policy because that’s where the web application becomes vulnerable.&lt;/p&gt;

&lt;p&gt;1) cross domain form posting is perfectly acceptable in web application. i.e. a form loaded at http://localhost:8080  , can execute the following code without any issues:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'document.getElementById(&quot;csrfform&quot;).submit()'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'post'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'csrfform'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://somesite.com/ve/admin/users/add'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'token'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'real_name'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'attacker'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bio'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'status'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'active'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'administrator'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'evilattacker2'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pwnd1111'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hidden'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'email'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ahuja.madhur@gmail.com'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'submit'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'submit'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above is a classic case of CSRF attack where a forged page is tricking the user to submit a request to other site without his knowledge. If the user is already logged onto http://somesite.com , the browser would also automatically include the cookies appropriate for http://somesite.com to automatically authenticate the request.&lt;/p&gt;

&lt;p&gt;2) The script tags do not come under same origin policy. i.e. it is perfectly legal for a site at http://somesite.com to have the following script tag in its html&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://somesite.com/somejs.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/head&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/body&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3) The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag is allowed to retrieve images from the cross origin. This might seem very innocuous but there have been some &lt;a href=&quot;https://www.evonide.com/side-channel-attacking-browsers-through-css3-features/&quot;&gt;attacks&lt;/a&gt; because of this.&lt;/p&gt;

&lt;p&gt;4) Just like images, in iframe the contents may be loaded but scripts in the outer framing page are not allowed to access the framed page contents.&lt;/p&gt;

&lt;h3 id=&quot;web-storage-indexeddb-and-localstorage&quot;&gt;Web Storage, IndexedDB and LocalStorage&lt;/h3&gt;

&lt;p&gt;Each origin gets its own dedicated Web Storage, IndexedDb and LocalStorage. The site in one origin cannot access the storage data of other origin. For example, the site running at http://localhost:8081 cannot access the localstorage of http://localhost:8082&lt;/p&gt;

&lt;h3 id=&quot;how-to-circumvent-same-origin-policy&quot;&gt;How to circumvent Same origin policy?&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;Cross origin request sharing (CORS)&lt;/a&gt; specification permits the cross origin sharing under special circumstances.&lt;/p&gt;

&lt;h2 id=&quot;protections-against-these-attacks&quot;&gt;Protections against these attacks&lt;/h2&gt;

&lt;p&gt;The protection against these attacks is really a big topic. But primarily two headers are helpful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;content-security-policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection&quot;&gt;X-XSS-Protection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>